# CREATE A LIST OF RANDOM DICTIONARIES
# Import random method to generate random values
import random
# Import string method to access letters to be used as keys
import string

# Create variable letter_keys that stores all the letters in lower case
letter_keys = string.ascii_lowercase
# Generate how many dictionaries will be created in the range 2-10
num_dicts = random.randint(2, 10)
# Create an empty list to store the dictionaries created
dicts_list = []
# Create a cycle that will run as many times as was generated previously for the amount of dictionaries
for _ in range(num_dicts):
    # Defines how many keys will be in the dictionary in range 1-5
    num_keys = random.randint(1, 5)
    # Generate random letters that will be used as keys
    keys = random.sample(letter_keys, num_keys)
    # Generates random values in range 0-100 for defined amount of keys
    random_dict = {key: random.randint(0, 100) for key in keys}
    # Add generated dictionary into the result variable created previously
    dicts_list.append(random_dict)

print(dicts_list)

# COMBINE A LIST OF RANDOM DICTIONARIES WITH CONDITION
# Create an empty dictionary to combine list of random dictionaries and store there index
combined_dict = {}
# Create a list to store keys that appear in several dictionaries
keys_to_compare = []
# Use enumerate to get the index of the dictionary and create a cycle to check each dictionary in the list
for idx, d in enumerate(dicts_list, start=1):
    # Check each key in every dictionary
    for key, value in d.items():
        # Create a cycle to validate those keys that already exist in the list
        if key in combined_dict:
            # Check if the value in the combined dictionary is lower that value in the other dictionary
            if value > combined_dict[key][0]:
                # If New value is higher than existing, we overwrite the existing one with new index
                combined_dict[key] = (value, idx)
            # Check if all the duplicated keys are recorded in the tracking list
            if key not in keys_to_compare:
                # Add new duplicated key into the tracking list when it's not yet there
                keys_to_compare.append(key)  # Добавляем ключ в список для сравнения
        else:
            combined_dict[key] = (value, idx)  # Добавляем ключ, значение и индекс словаря

# Create a list to store a final result
final_dict = {}
# Create a cycle to check what keys appear several times in the dictionaries
for key, (value, idx) in combined_dict.items():
    # Creating a cycle to update key name for those keys that are duplicates
    if key in keys_to_compare:
        # Updating the key name
        final_dict[f"{key}_{idx}"] = value
    else:
        # Add unique keys without any changes
        final_dict[key] = value

print(combined_dict)
print(final_dict)
